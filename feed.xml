<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="https://poisonousjohn.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://poisonousjohn.github.io/" rel="alternate" type="text/html" /><updated>2018-06-16T21:23:03+03:00</updated><id>https://poisonousjohn.github.io/</id><title type="html">Ivan Fateev's Blog</title><subtitle>Learn new things, share your experience</subtitle><entry><title type="html">Пещера Ядовитого Джона: Telegram Channel</title><link href="https://poisonousjohn.github.io/chronicles/poisonous_johns_lair_telegram_channel.html" rel="alternate" type="text/html" title="Пещера Ядовитого Джона: Telegram Channel" /><published>2017-11-08T17:33:30+03:00</published><updated>2017-11-08T17:33:30+03:00</updated><id>https://poisonousjohn.github.io/chronicles/poisonous_johns_lair_telegram_channel</id><content type="html" xml:base="https://poisonousjohn.github.io/chronicles/poisonous_johns_lair_telegram_channel.html">&lt;p&gt;&lt;a href=&quot;http://fateev.pro/wp-content/uploads/2017/11/jp_oss_pirate_small.png&quot;&gt;&lt;img class=&quot;size-full wp-image-411 alignleft&quot; src=&quot;http://fateev.pro/wp-content/uploads/2017/11/jp_oss_pirate_small.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;216&quot; /&gt;&lt;/a&gt;Запустил свой телеграм канал &lt;a href=&quot;https://t.me/poisonous_johns_lair&quot;&gt;Пещера Ядовитого Джона&lt;/a&gt;. Милости прошу. В основном пишу о лучших практиках в программной разработке.&lt;/p&gt;</content><author><name>Poisonous John</name></author><category term="Telegram" /><summary type="html">Запустил свой телеграм канал Пещера Ядовитого Джона. Милости прошу. В основном пишу о лучших практиках в программной разработке.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://poisonousjohn.github.io/wp-content/uploads/2017/11/jp_oss_pirate_small.png" /></entry><entry><title type="html">Waveshare 7″ touchscreen showing lines and black screen</title><link href="https://poisonousjohn.github.io/iot/waveshare-7-touchscreen-showing-lines-and-black-screen.html" rel="alternate" type="text/html" title="Waveshare 7&amp;#8243; touchscreen showing lines and black screen" /><published>2017-01-03T18:14:30+03:00</published><updated>2017-01-03T18:14:30+03:00</updated><id>https://poisonousjohn.github.io/iot/waveshare-7-touchscreen-showing-lines-and-black-screen</id><content type="html" xml:base="https://poisonousjohn.github.io/iot/waveshare-7-touchscreen-showing-lines-and-black-screen.html">&lt;p&gt;&lt;a href=&quot;http://fateev.pro/wp-content/uploads/2017/01/7inch-HDMI-LCD-B_l.jpg&quot; rel=&quot;attachment wp-att-390&quot;&gt;&lt;img class=&quot;alignleft wp-image-390 size-full&quot; src=&quot;http://fateev.pro/wp-content/uploads/2017/01/7inch-HDMI-LCD-B_l.jpg&quot; alt=&quot;Waveshare touchscreen 7inch&quot; width=&quot;300&quot; height=&quot;225&quot; /&gt;&lt;/a&gt;I’ve recently bought a waveshare 7 inch touchscreen, which didn’t work out of the box. It comes with custom raspbian image, which isn’t handy because you can’t upgrade so easily. So actually this display is able to work on stock raspbian with slight modifications to config.txt as you can see below.&lt;/p&gt;

&lt;p&gt;Also I couldn’t get touch capabilities working on Raspberry Pi, yet touch worked on Ubuntu. So I’ve made a fork of a driver I found on github: https://github.com/JohnPoison/waveshare-7inch-touchscreen-driver . And added support for right button on hold and scroll by two fingers.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/JohnPoison/ed544f07da72568fc60074a4566560b8.js&quot;&gt;&lt;/script&gt;</content><author><name>Poisonous John</name></author><category term="IoT" /><category term="Raspberry Pi" /><summary type="html">I’ve recently bought a waveshare 7 inch touchscreen, which didn’t work out of the box. It comes with custom raspbian image, which isn’t handy because you can’t upgrade so easily. So actually this display is able to work on stock raspbian with slight modifications to config.txt as you can see below. Also I couldn’t get touch capabilities working on Raspberry Pi, yet touch worked on Ubuntu. So I’ve made a fork of a driver I found on github: https://github.com/JohnPoison/waveshare-7inch-touchscreen-driver . And added support for right button on hold and scroll by two fingers.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://poisonousjohn.github.io/wp-content/uploads/2017/01/7inch-HDMI-LCD-B_l.jpg" /></entry><entry><title type="html">Unity 4.6.x doesn’t show up when opening large projects, is it alive?</title><link href="https://poisonousjohn.github.io/gamedev/unity/unity-4-6-x-doesnt-show-up-when-opening-large-projects-is-it-alive.html" rel="alternate" type="text/html" title="Unity 4.6.x doesn&amp;#8217;t show up when opening large projects, is it alive?" /><published>2016-12-19T19:13:54+03:00</published><updated>2016-12-19T19:13:54+03:00</updated><id>https://poisonousjohn.github.io/gamedev/unity/unity-4-6-x-doesnt-show-up-when-opening-large-projects-is-it-alive</id><content type="html" xml:base="https://poisonousjohn.github.io/gamedev/unity/unity-4-6-x-doesnt-show-up-when-opening-large-projects-is-it-alive.html">&lt;p&gt;&lt;a href=&quot;http://fateev.pro/wp-content/uploads/2016/12/977b0ce93a4099143e64ae932e905dc0_e7cdc06072836c64f441c5014ad641f5.jpg&quot; rel=&quot;attachment wp-att-383&quot;&gt;&lt;img class=&quot;alignleft size-full wp-image-383&quot; src=&quot;http://fateev.pro/wp-content/uploads/2016/12/977b0ce93a4099143e64ae932e905dc0_e7cdc06072836c64f441c5014ad641f5.jpg&quot; alt=&quot;977b0ce93a4099143e64ae932e905dc0_e7cdc06072836c64f441c5014ad641f5&quot; width=&quot;300&quot; height=&quot;195&quot; /&gt;&lt;/a&gt;Due to single-threaded approach of Unity editor of version 4.x, when opening large project first time, Unity launches importing of files, yet doesn’t show anything on screen. Also CPU activity keeps at low rate.  On Mac OS X it is possible to track Unity’s background activity when it is reading files using following command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo fs_usage | grep Unity | grep /&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command shows which files are being opened by Unity at the time. This should give you enough information on its current activity and make a rough estimation of process complete time.&lt;/p&gt;</content><author><name>Poisonous John</name></author><category term="OSX" /><category term="unity" /><summary type="html">Due to single-threaded approach of Unity editor of version 4.x, when opening large project first time, Unity launches importing of files, yet doesn’t show anything on screen. Also CPU activity keeps at low rate.  On Mac OS X it is possible to track Unity’s background activity when it is reading files using following command:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://poisonousjohn.github.io/wp-content/uploads/2016/12/977b0ce93a4099143e64ae932e905dc0_e7cdc06072836c64f441c5014ad641f5.jpg" /></entry><entry><title type="html">Cinnamon заставил скучать по Linux</title><link href="https://poisonousjohn.github.io/chronicles/cinnamon-zastavil-skuchat-po-linux.html" rel="alternate" type="text/html" title="Cinnamon заставил скучать по Linux" /><published>2015-12-30T03:21:30+03:00</published><updated>2015-12-30T03:21:30+03:00</updated><id>https://poisonousjohn.github.io/chronicles/cinnamon-zastavil-skuchat-po-linux</id><content type="html" xml:base="https://poisonousjohn.github.io/chronicles/cinnamon-zastavil-skuchat-po-linux.html">&lt;p&gt;Не смотря на то, что основная моя рабочая машина - iMac, и она меня вполне устраивает, сердце все равно тоскует по &lt;strong&gt;свободе Linux&lt;/strong&gt;‘a. На домашнем ноуте у меня стоит Linux, на котором недавно я попробовал &lt;strong&gt;Cinnamon&lt;/strong&gt;. И… он потрясающий! Невероятно легкая и простая оболочка, с большими возможностями для кастомизации. На удивление, багов я, практически, не встретил. Теперь, работая на Mac OS X, невольно хочется вернуться в, теперь уже любимый, Cinnamon.&lt;/p&gt;

&lt;p&gt;Так выглядит мой рабочий стол:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fateev.pro/wp-content/uploads/2015/12/Screenshot-from-2015-12-30-001346.png&quot; rel=&quot;attachment wp-att-367&quot;&gt;&lt;img class=&quot;alignleft size-medium_large wp-image-367&quot; src=&quot;http://fateev.pro/wp-content/uploads/2015/12/Screenshot-from-2015-12-30-001346-768x252.png&quot; alt=&quot;Screenshot from 2015-12-30 00:13:46&quot; width=&quot;768&quot; height=&quot;252&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cinnamon поддерживает различные расширения. Крайне полезным для себя я нашел &lt;strong&gt;gTile&lt;/strong&gt;, позволяющий удобно позиционировать окна по хоткеям. Хотя и сам cinnamon позволяет Win+arrows позиционировать окна. Так же полезная настройка - убрать title bar при максимизировании окна, что экономит прилично места на экране.&lt;/p&gt;</content><author><name>Poisonous John</name></author><category term="cinnamon" /><category term="linux" /><summary type="html">Не смотря на то, что основная моя рабочая машина - iMac, и она меня вполне устраивает, сердце все равно тоскует по свободе Linux‘a. На домашнем ноуте у меня стоит Linux, на котором недавно я попробовал Cinnamon. И… он потрясающий! Невероятно легкая и простая оболочка, с большими возможностями для кастомизации. На удивление, багов я, практически, не встретил. Теперь, работая на Mac OS X, невольно хочется вернуться в, теперь уже любимый, Cinnamon. Так выглядит мой рабочий стол: Cinnamon поддерживает различные расширения. Крайне полезным для себя я нашел gTile, позволяющий удобно позиционировать окна по хоткеям. Хотя и сам cinnamon позволяет Win+arrows позиционировать окна. Так же полезная настройка - убрать title bar при максимизировании окна, что экономит прилично места на экране.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://poisonousjohn.github.io/wp-content/uploads/2015/12/Screenshot-from-2015-12-30-001346.png" /></entry><entry><title type="html">Facebook Unity SDK Problems and Error Handling</title><link href="https://poisonousjohn.github.io/gamedev/unity/facebook-unity-sdk-problems-and-error-handling.html" rel="alternate" type="text/html" title="Facebook Unity SDK Problems and Error Handling" /><published>2015-08-05T13:58:45+03:00</published><updated>2015-08-05T13:58:45+03:00</updated><id>https://poisonousjohn.github.io/gamedev/unity/facebook-unity-sdk-problems-and-error-handling</id><content type="html" xml:base="https://poisonousjohn.github.io/gamedev/unity/facebook-unity-sdk-problems-and-error-handling.html">&lt;p&gt;&lt;a href=&quot;http://fateev.pro/wp-content/uploads/2014/05/67a6bfe5cb2.png&quot;&gt;&lt;img class=&quot;alignleft wp-image-307 size-medium&quot; src=&quot;http://fateev.pro/wp-content/uploads/2014/05/67a6bfe5cb2-300x300.png&quot; alt=&quot;Facebook Unity SDK&quot; width=&quot;300&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unity is quite useful. But every tool has its own cons. One of that cons is a WWW class - some kind of HTTP wrapper. You might say: “What’s wrong with it? It’s quite handy!”. Yes, it is, till you need to work with some kind of REST API.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Most of the REST services and also OAuth 2.0 spec using http error codes to inform user about some kind of error. But along with error code service provides response that contains details about an error because just an error code is not enough to understand what to do with such error. Facebook Open Graph API is one of such services. &lt;a href=&quot;https://developers.facebook.com/docs/graph-api/using-graph-api/v2.4#errors&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Documentation states&lt;/a&gt; that in case of error we should parse JSON response and look to the error code and other error details to understand what’s wrong.
Common error response looks like this:&lt;/p&gt;
&lt;pre&gt; 
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Message describing the error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;OAuthException&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&quot;code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;190&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&quot;error_subcode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;460&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&quot;error_user_title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&quot;error_user_msg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A message&quot;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/pre&gt;
&lt;p&gt;The most important error in my case is &lt;strong&gt;invalid token&lt;/strong&gt;. In that case we should reauthorize user in our app. If it won’t be done, all queries to API will fail. This breaks all the things. Facebook Unity SDK provides &lt;strong&gt;FBResult&lt;/strong&gt; class to read repsonse from facebook’s API. Problem that I’m talking about is that&lt;/p&gt;
&lt;blockquote&gt;&lt;strong&gt; You can't use FBResult to handle facebook API errors.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;You might say: Why? It has an &lt;strong&gt;FBResult.Error&lt;/strong&gt; property for that”. But what that property is for? It has a string type and all you can get from it is a text description of an error like “400 Bad Response”. Is that informative for you? Neither for me. Open graph API returns 400 http error code if ANY error occurs. I assumed that &lt;strong&gt;FBResult.Text&lt;/strong&gt; property should contain a JSON describing the error like stated in documentation. It’s not! You can’t retrieve error’s JSON! Why?&lt;/p&gt;
&lt;blockquote&gt;&lt;strong&gt;Unity's WWW class doesn't allow you to get response if error code not equals 200 (Success). &lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;If you look at FBResult class in a debugger while receiving a response you see that FBResult’s contains a data member which value is a WWW object. That’s why the FBResult.Text property is empty when an error occurs. You might see an error in unity’s console in such case: &lt;strong&gt;“You are trying to load data from a www stream which had the following error when downloading. 400 Bad Request”.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s absolutely pointless to forbid read a response if the response code not equals 200. It violates OAuth specifications. It’s a bug and it exists in unity for years. Facebook developers that worked with Facebook Unity SDK knew it for sure and just ignored it. They just don’t care about it. Facebook Unity SDK is outdated and updated rarely. Features like Share Dialog isn’t supported.&lt;/p&gt;

&lt;p&gt;Fortunately Open Graph SDK provides error details in HTTP Headers! To solve problem with error handling I use some hack. I would avoid it if situation wouldn’t be so awful. I use reflection to get protected FBResult.data field. As I mentioned before that field contains WWW object that I can use to retrieve http headers. Here is a part of my class:&lt;/p&gt;
&lt;pre&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Linq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Text.RegularExpressions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Collections.Generic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Reflection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;LitJson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Glu.ContractKiller3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Glu.Localization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Glu.JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Glu.Facebook&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SDKError&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error_subcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error_user_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error_user_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SDKError&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateFromHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ContainsKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WWW-AUTHENTICATE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WWW-AUTHENTICATE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Regex&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;(?[^\s&quot;&quot;]+)|&quot;&quot;(?[^&quot;&quot;]*)&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Cast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Groups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;OAuth&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Facebook Platform&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SDKError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetOAuthError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetReloginRequired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error_user_title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Facebook Error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error_user_msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SDKErrorExtensions&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SDKError&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ToSDKError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FBResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SDKError&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_fbResultDataField&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;_fbResultDataField&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BindingFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NonPublic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BindingFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


                &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;www&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_fbResultDataField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnityEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WWW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytesDownloaded&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SDKError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateNetworkError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SDKError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateFromHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;



            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FieldInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_fbResultDataField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/pre&gt;
&lt;p&gt;I cache FieldInfo to make reflection queries a little bit faster. Also I check bytesDownloaded and response headers to know if error caused by network problems. If not I check WWW-AUTHENTICATE header that facebook fills with error details. Regular expression required to parse a data in the header. Example of a Header’s data:&lt;/p&gt;
&lt;pre&gt;OAuth &quot;Facebook Platform&quot; &quot;invalid_token&quot; &quot;Token is invalid because user logged out.&quot;
&lt;/pre&gt;
&lt;p&gt;As you see the data format is kind of odd. But I retrieve data by sentences (a single word OR a statement between double quotes). Last part of a header is a message that we can log or display to user. invalid_token chunk looks like error type, so we can use it to decide how to deal with this error.&lt;/p&gt;

&lt;p&gt;As an alternative to my hack you can use WebRequest but I wouldn’t recommend rely on it.&lt;/p&gt;</content><author><name>Poisonous John</name></author><category term="c#" /><category term="Facebook" /><category term="unity" /><summary type="html">Unity is quite useful. But every tool has its own cons. One of that cons is a WWW class - some kind of HTTP wrapper. You might say: “What’s wrong with it? It’s quite handy!”. Yes, it is, till you need to work with some kind of REST API. Most of the REST services and also OAuth 2.0 spec using http error codes to inform user about some kind of error. But along with error code service provides response that contains details about an error because just an error code is not enough to understand what to do with such error. Facebook Open Graph API is one of such services. Documentation states that in case of error we should parse JSON response and look to the error code and other error details to understand what’s wrong. Common error response looks like this: { &quot;error&quot;: { &quot;message&quot;: &quot;Message describing the error&quot;, &quot;type&quot;: &quot;OAuthException&quot;, &quot;code&quot;: 190, &quot;error_subcode&quot;: 460, &quot;error_user_title&quot;: &quot;A title&quot;, &quot;error_user_msg&quot;: &quot;A message&quot; } } The most important error in my case is invalid token. In that case we should reauthorize user in our app. If it won’t be done, all queries to API will fail. This breaks all the things. Facebook Unity SDK provides FBResult class to read repsonse from facebook’s API. Problem that I’m talking about is that You can't use FBResult to handle facebook API errors. You might say: Why? It has an FBResult.Error property for that”. But what that property is for? It has a string type and all you can get from it is a text description of an error like “400 Bad Response”. Is that informative for you? Neither for me. Open graph API returns 400 http error code if ANY error occurs. I assumed that FBResult.Text property should contain a JSON describing the error like stated in documentation. It’s not! You can’t retrieve error’s JSON! Why? Unity's WWW class doesn't allow you to get response if error code not equals 200 (Success). If you look at FBResult class in a debugger while receiving a response you see that FBResult’s contains a data member which value is a WWW object. That’s why the FBResult.Text property is empty when an error occurs. You might see an error in unity’s console in such case: “You are trying to load data from a www stream which had the following error when downloading. 400 Bad Request”. It’s absolutely pointless to forbid read a response if the response code not equals 200. It violates OAuth specifications. It’s a bug and it exists in unity for years. Facebook developers that worked with Facebook Unity SDK knew it for sure and just ignored it. They just don’t care about it. Facebook Unity SDK is outdated and updated rarely. Features like Share Dialog isn’t supported. Fortunately Open Graph SDK provides error details in HTTP Headers! To solve problem with error handling I use some hack. I would avoid it if situation wouldn’t be so awful. I use reflection to get protected FBResult.data field. As I mentioned before that field contains WWW object that I can use to retrieve http headers. Here is a part of my class: using System; using System.Linq; using System.Text.RegularExpressions; using System.Collections.Generic; using System.Reflection; using LitJson; using Glu.ContractKiller3; using Glu.Localization; using Glu.JSON; namespace Glu.Facebook { public class SDKError { public string message; public string type; public int code; public int error_subcode; public string error_user_title; public string error_user_msg; public static SDKError CreateFromHeaders(Dictionary&amp;amp;lt;string, string&amp;amp;gt; headers) { if (headers.ContainsKey(&quot;WWW-AUTHENTICATE&quot;)) { string header = headers[&quot;WWW-AUTHENTICATE&quot;]; var components = Regex .Matches(header, @&quot;(?[^\s&quot;&quot;]+)|&quot;&quot;(?[^&quot;&quot;]*)&quot;&quot;&quot;) .Cast().ToList() .Select(m =&amp;amp;gt; m.Groups[&quot;match&quot;].Value) .ToList(); if (components != null &amp;amp;amp;&amp;amp;amp; components.Count == 4 &amp;amp;amp;&amp;amp;amp; components[0] == &quot;OAuth&quot; &amp;amp;amp;&amp;amp;amp; components[1] == &quot;Facebook Platform&quot;) { var err = new SDKError(); err.SetOAuthError(); err.SetReloginRequired(); err.message = components[3]; err.error_user_title = &quot;Facebook Error&quot;; err.error_user_msg = err.message; return err; } } return null; } } static class SDKErrorExtensions { public static SDKError ToSDKError(this FBResult result) { SDKError err = null; if (result != null) { if (_fbResultDataField == null) { _fbResultDataField = result.GetType().GetField(&quot;data&quot;, BindingFlags.NonPublic | BindingFlags.Instance); } var www = _fbResultDataField.GetValue(result) as UnityEngine.WWW; if (www != null) { if (www.bytesDownloaded == 0 || www.responseHeaders.Count == 0) { err = SDKError.CreateNetworkError(); } else { err = SDKError.CreateFromHeaders(www.responseHeaders); } } } return err; } private static FieldInfo _fbResultDataField; } } I cache FieldInfo to make reflection queries a little bit faster. Also I check bytesDownloaded and response headers to know if error caused by network problems. If not I check WWW-AUTHENTICATE header that facebook fills with error details. Regular expression required to parse a data in the header. Example of a Header’s data: OAuth &quot;Facebook Platform&quot; &quot;invalid_token&quot; &quot;Token is invalid because user logged out.&quot; As you see the data format is kind of odd. But I retrieve data by sentences (a single word OR a statement between double quotes). Last part of a header is a message that we can log or display to user. invalid_token chunk looks like error type, so we can use it to decide how to deal with this error. As an alternative to my hack you can use WebRequest but I wouldn’t recommend rely on it.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://poisonousjohn.github.io/wp-content/uploads/2014/05/67a6bfe5cb2.png" /></entry><entry><title type="html">Smiley Boom – первый крупный релиз</title><link href="https://poisonousjohn.github.io/chronicles/smiley-boom-perviy-krupniy-reliz.html" rel="alternate" type="text/html" title="Smiley Boom &amp;#8211; первый крупный релиз" /><published>2014-06-02T16:52:50+04:00</published><updated>2014-06-02T16:52:50+04:00</updated><id>https://poisonousjohn.github.io/chronicles/smiley-boom-perviy-krupniy-reliz</id><content type="html" xml:base="https://poisonousjohn.github.io/chronicles/smiley-boom-perviy-krupniy-reliz.html">&lt;p&gt;&lt;a href=&quot;http://fateev.pro/wp-content/uploads/2014/04/smileyBoom.png&quot;&gt;&lt;img class=&quot;alignleft  wp-image-302&quot; title=&quot;smileyBoom&quot; src=&quot;http://fateev.pro/wp-content/uploads/2014/04/smileyBoom-300x300.png&quot; alt=&quot;&quot; width=&quot;180&quot; height=&quot;180&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Мы наконец-то зарелизили нашу игру &lt;a href=&quot;http://www.game-insight.com/ru/games/smiley-boom&quot;&gt;Smiley Boom&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://apps.facebook.com/smiley_boom/&quot;&gt;Facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/ru/app/smiley-boom/id798708455&quot;&gt;iOS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Что хочу заметить:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Реализация внутриигровых покупок (IAP) заняла больше недели ( хотя я планировал значительно меньше ), это обусловлено тем, что очень много нестандартных вариантов с потерей соединения и прочего, а так же с наличием у нас механики акций.&lt;/li&gt;
	&lt;li&gt;Кучу сложностей сейчас создает режим частичного онлайна, то есть когда только часть функционала требует полного онлайна - все остальное доступно в оффлайне. Кучу данных приходится слать очередью, пачками при выходе в онлайн.&lt;/li&gt;
	&lt;li&gt;Забавный факт: Игровая механика была уже готова несколько месяцев назад, много времени ушло на реализацию интеграции с соц. сетями (в нашем случае пока что только Facebook), интеграцию с различными маркетинговыми SDK и прочими подобными вещами.&lt;/li&gt;
	&lt;li&gt;Много вещей после релиза придется переделывать, так как эти вещи сейчас сделаны на скорость, нежели на качество&lt;/li&gt;
	&lt;li&gt;Народ в команду лучше набирать задолго до релиза&lt;/li&gt;
	&lt;li&gt;Match3 игра, вопреки общему мнению, это не пустяк (особенно когда игра включает в себя много механик) , и на данный момент срок разработки приближается к отметке 1 год (хотя команда изначально была очень небольшой)&lt;/li&gt;
	&lt;li&gt;В ходе разработки игры интерфейс (дизайн) менялся 3 раза (это далеко не предел), а игровая механика 2 раза.&lt;/li&gt;
	&lt;li&gt;Достаточно много времени ушло на проработку системы адаптации к разрешениям экрана ( и его повороту ) - очень важная фича (поворот экрана в итоге не вошел в первый релиз)&lt;/li&gt;
	&lt;li&gt;Многие вещи до сих пор совсем не оптимизированы&lt;/li&gt;
	&lt;li&gt;Не стоит писать &quot;свой фреймворк&quot; для игры, либо давать это делать людям, которые в этом имеют опыт и понимают что делают&lt;/li&gt;
	&lt;li&gt;Тутор не вошел в первый релиз&lt;/li&gt;
	&lt;li&gt;Локализация не планировалась заранее, тем не менее, мы быстро ее прикрутили (правда исключая азиатские языки)&lt;/li&gt;
	&lt;li&gt;Достаточно много времени занимает интеграция всяких SDK для маркетинговых целей, типа Flurry, Mobile App Tracking и прочего хлама, которые, по большей части, собирают одни и те же данные (и мы до сих пор интегрировали не все SDK, и не все функции)&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;Из технологий:&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
	&lt;li&gt;Сейчас работа с сервером организована посредством классического REST API, в процессе переход на socket'ы.&lt;/li&gt;
	&lt;li&gt;Основной формат общений с сервером JSON&lt;/li&gt;
	&lt;li&gt;Большинство файлов конфигурации XML&lt;/li&gt;
	&lt;li&gt;Локальное хранилище данных SQLite&lt;/li&gt;
	&lt;li&gt;Для сетевых запросов используется cURL&lt;/li&gt;
	&lt;li&gt;Графика рисуется OpenGL ES 2.0 собственным движком (о Боже, за что?)&lt;/li&gt;
	&lt;li&gt;Почти все написано на C++, исключая платформозависимые части&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;Хочу пожаловаться на последние две недели перед релизом. Коротко говоря - это трындец. Я работал в среднем по 14 часов в сутки, без выходных. И все равно мы не успели к обозначенной дате релиза.&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;To be continued...&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;</content><author><name>Poisonous John</name></author><category term="gamedev" /><category term="mobile" /><summary type="html">Мы наконец-то зарелизили нашу игру Smiley Boom: Facebook iOS Что хочу заметить: Реализация внутриигровых покупок (IAP) заняла больше недели ( хотя я планировал значительно меньше ), это обусловлено тем, что очень много нестандартных вариантов с потерей соединения и прочего, а так же с наличием у нас механики акций. Кучу сложностей сейчас создает режим частичного онлайна, то есть когда только часть функционала требует полного онлайна - все остальное доступно в оффлайне. Кучу данных приходится слать очередью, пачками при выходе в онлайн. Забавный факт: Игровая механика была уже готова несколько месяцев назад, много времени ушло на реализацию интеграции с соц. сетями (в нашем случае пока что только Facebook), интеграцию с различными маркетинговыми SDK и прочими подобными вещами. Много вещей после релиза придется переделывать, так как эти вещи сейчас сделаны на скорость, нежели на качество Народ в команду лучше набирать задолго до релиза Match3 игра, вопреки общему мнению, это не пустяк (особенно когда игра включает в себя много механик) , и на данный момент срок разработки приближается к отметке 1 год (хотя команда изначально была очень небольшой) В ходе разработки игры интерфейс (дизайн) менялся 3 раза (это далеко не предел), а игровая механика 2 раза. Достаточно много времени ушло на проработку системы адаптации к разрешениям экрана ( и его повороту ) - очень важная фича (поворот экрана в итоге не вошел в первый релиз) Многие вещи до сих пор совсем не оптимизированы Не стоит писать &quot;свой фреймворк&quot; для игры, либо давать это делать людям, которые в этом имеют опыт и понимают что делают Тутор не вошел в первый релиз Локализация не планировалась заранее, тем не менее, мы быстро ее прикрутили (правда исключая азиатские языки) Достаточно много времени занимает интеграция всяких SDK для маркетинговых целей, типа Flurry, Mobile App Tracking и прочего хлама, которые, по большей части, собирают одни и те же данные (и мы до сих пор интегрировали не все SDK, и не все функции) Из технологий: Сейчас работа с сервером организована посредством классического REST API, в процессе переход на socket'ы. Основной формат общений с сервером JSON Большинство файлов конфигурации XML Локальное хранилище данных SQLite Для сетевых запросов используется cURL Графика рисуется OpenGL ES 2.0 собственным движком (о Боже, за что?) Почти все написано на C++, исключая платформозависимые части Хочу пожаловаться на последние две недели перед релизом. Коротко говоря - это трындец. Я работал в среднем по 14 часов в сутки, без выходных. И все равно мы не успели к обозначенной дате релиза. To be continued...  </summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://poisonousjohn.github.io/wp-content/uploads/2014/04/smileyBoom.png" /></entry><entry><title type="html">Утечки. XCode Leaks &amp;#038; Allocations. Осторожно XML</title><link href="https://poisonousjohn.github.io/gamedev/utechki-xcode-leaks-and-allocations-ostorozhno-xml.html" rel="alternate" type="text/html" title="Утечки. XCode Leaks &amp;#038; Allocations. Осторожно XML" /><published>2014-06-02T16:50:39+04:00</published><updated>2014-06-02T16:50:39+04:00</updated><id>https://poisonousjohn.github.io/gamedev/utechki-xcode-leaks-and-allocations-ostorozhno-xml</id><content type="html" xml:base="https://poisonousjohn.github.io/gamedev/utechki-xcode-leaks-and-allocations-ostorozhno-xml.html">&lt;p&gt;&lt;a href=&quot;http://fateev.pro/wp-content/uploads/2014/06/crystal_xml.png&quot;&gt;&lt;img class=&quot;alignleft size-full wp-image-325&quot; title=&quot;crystal_xml&quot; src=&quot;http://fateev.pro/wp-content/uploads/2014/06/crystal_xml.png&quot; alt=&quot;&quot; width=&quot;128&quot; height=&quot;128&quot; /&gt;&lt;/a&gt;Я люблю сложные задачи, но терпеть не могу, когда не ясно откуда идет проблема, как с ней бороться и куда вообще копать. Третий день бьюсь над проблемами с памятью: после загрузки и выгрузки игровой сцены есть большая утечка порядка 20Мб, что, мягко говоря, много. Изначально я пробовал пользоваться инструментом Leaks, но он не показывал практически ничего. Тогда  я обратил свое внимание на инструмент Allocations. Разобраться в том как с ним работать в моем случае было довольно большой головной болью.&lt;/p&gt;

&lt;p&gt;Итак принцип по которому я работал был следующим:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Загружаю главный экран. Делаю снимок.&lt;/li&gt;
	&lt;li&gt;Загружаю игровой экран, загружаю главный экран, делаю снимок.&lt;/li&gt;
	&lt;li&gt;Повторяю пункт 2 еще несколько раз.&lt;/li&gt;
	&lt;li&gt;Открываю один из средних снимков и смотрю из-за каких объектов выросла куча&lt;/li&gt;
	&lt;li&gt;Устраняю те проблемы, причина которых стала очевидной&lt;/li&gt;
	&lt;li&gt;Повторяю все с пункта 1 до тех пор, пока результат работы приложения меня не устроит&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;А теперь в кратце о неожиданных результатах, с которыми я столкнулся.&lt;/p&gt;
&lt;h2&gt;XML очень дорогой формат&lt;/h2&gt;
&lt;p&gt;Итак, я начну с минусов:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Слишком большие файлы - много избыточной информации&lt;/li&gt;
	&lt;li&gt;Довольно долгий парсинг&lt;/li&gt;
	&lt;li&gt;Требует довольно большого объема памяти&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Плюсы:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Удобочитаемость - важно особенно на этапе активной разработки, когда нужно что то поменять на лету&lt;/li&gt;
	&lt;li&gt;Можно сжать в архив&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Большие файлы для меня проблема, так как максимальный размер бандла ограничен, а xml файлов у меня много. Скорость парсинга, конечно, зависит от библиотеки для работы с xml, но, конечно, она несравнима, например, с обработкой бинарного формата. А вот проблема с памятью для меня оказалась большой неожиданностью. Я работаю c xml при помощи tinyxml. Ранее ресурсы были организованы таким образом, что хранился распарсенный xml, и, каждый раз применяя ресурс, я проходил по дереву для получения нужных мне параметров. Здесь открылись две проблемы: один XMLElement в памяти занимал 4Кб, а теперь, если представить сколько этих элементов в среднего размера xml’ке, то можно понять, что это катастрофично. Первым делом я перделал логику таким образом, чтобы парсить xml только при загрузке ресурса, а затем создавать объекты из заранее заполненных структур данных. Это не только освободило изрядный кусок памяти, но и дало большой прирост в производительности. Как показала практика, поиск по элементам в xml намного медленнее, чем, скажем, поиск по unordered_map’у. В итоге, избавившись от постоянной работы с xml, я только выиграл. Следующим шагом, я думаю, стоит перейти с xml на бинарный формат.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;</content><author><name>Poisonous John</name></author><category term="c++" /><category term="gamedev" /><summary type="html">Я люблю сложные задачи, но терпеть не могу, когда не ясно откуда идет проблема, как с ней бороться и куда вообще копать. Третий день бьюсь над проблемами с памятью: после загрузки и выгрузки игровой сцены есть большая утечка порядка 20Мб, что, мягко говоря, много. Изначально я пробовал пользоваться инструментом Leaks, но он не показывал практически ничего. Тогда  я обратил свое внимание на инструмент Allocations. Разобраться в том как с ним работать в моем случае было довольно большой головной болью. Итак принцип по которому я работал был следующим: Загружаю главный экран. Делаю снимок. Загружаю игровой экран, загружаю главный экран, делаю снимок. Повторяю пункт 2 еще несколько раз. Открываю один из средних снимков и смотрю из-за каких объектов выросла куча Устраняю те проблемы, причина которых стала очевидной Повторяю все с пункта 1 до тех пор, пока результат работы приложения меня не устроит А теперь в кратце о неожиданных результатах, с которыми я столкнулся. XML очень дорогой формат Итак, я начну с минусов: Слишком большие файлы - много избыточной информации Довольно долгий парсинг Требует довольно большого объема памяти Плюсы: Удобочитаемость - важно особенно на этапе активной разработки, когда нужно что то поменять на лету Можно сжать в архив Большие файлы для меня проблема, так как максимальный размер бандла ограничен, а xml файлов у меня много. Скорость парсинга, конечно, зависит от библиотеки для работы с xml, но, конечно, она несравнима, например, с обработкой бинарного формата. А вот проблема с памятью для меня оказалась большой неожиданностью. Я работаю c xml при помощи tinyxml. Ранее ресурсы были организованы таким образом, что хранился распарсенный xml, и, каждый раз применяя ресурс, я проходил по дереву для получения нужных мне параметров. Здесь открылись две проблемы: один XMLElement в памяти занимал 4Кб, а теперь, если представить сколько этих элементов в среднего размера xml’ке, то можно понять, что это катастрофично. Первым делом я перделал логику таким образом, чтобы парсить xml только при загрузке ресурса, а затем создавать объекты из заранее заполненных структур данных. Это не только освободило изрядный кусок памяти, но и дало большой прирост в производительности. Как показала практика, поиск по элементам в xml намного медленнее, чем, скажем, поиск по unordered_map’у. В итоге, избавившись от постоянной работы с xml, я только выиграл. Следующим шагом, я думаю, стоит перейти с xml на бинарный формат.  </summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://poisonousjohn.github.io/wp-content/uploads/2014/06/crystal_xml.png" /></entry><entry><title type="html">Facebook iOS SDK FBSession release message sent to deallocated object</title><link href="https://poisonousjohn.github.io/chronicles/facebook-ios-sdk-fbsession-release-message-sent-to-deallocated-object.html" rel="alternate" type="text/html" title="Facebook iOS SDK FBSession release message sent to deallocated object" /><published>2014-05-19T14:25:00+04:00</published><updated>2014-05-19T14:25:00+04:00</updated><id>https://poisonousjohn.github.io/chronicles/facebook-ios-sdk-fbsession-release-message-sent-to-deallocated-object</id><content type="html" xml:base="https://poisonousjohn.github.io/chronicles/facebook-ios-sdk-fbsession-release-message-sent-to-deallocated-object.html">&lt;p&gt;&lt;a href=&quot;http://fateev.pro/wp-content/uploads/2014/05/67a6bfe5cb2.png&quot;&gt;&lt;img class=&quot;alignleft size-medium wp-image-307&quot; style=&quot;margin-right: 50px;&quot; title=&quot;67a6bfe5cb2&quot; src=&quot;http://fateev.pro/wp-content/uploads/2014/05/67a6bfe5cb2-300x300.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;Каким-то необычайно странным образом столкнулся со следующей проблемой:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Запускаем приложение&lt;/li&gt;&lt;li&gt;Запрашиваем права на publish_actions&lt;/li&gt;&lt;li&gt;Даем отказ в правах&lt;/li&gt;&lt;li&gt;Перезапускаем приложение&lt;/li&gt;&lt;li&gt;Получаем crash на objc_release (двойной релиз)&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;Включив Enable Zombie Objects, локализовал проблему:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;[FBSession release] message sent to deallocated instance&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;В проекте выключен ARC, код брал из документации FB. Покопавшись еще немного (и приняв во внимание, что, скорее всего, FBSession релизится при logout) нашел функцию, которая приводила к крашу:&lt;br /&gt; &lt;/p&gt;
&lt;p&gt;void IOSFacebook::logout() {&lt;br /&gt; [FBSession.activeSession closeAndClearTokenInformation];&lt;br /&gt; [FBSession.activeSession close];&lt;br /&gt; // [FBSession setActiveSession:nil]; Эта строчка вызывала краш&lt;/p&gt;
&lt;p&gt;token.clear();&lt;/p&gt;
&lt;p&gt;refreshAccount();&lt;br /&gt; }&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Не знаю что конкретно вызывало краш, обозначенная строчка ничего криминального не делала, но закомментив ее, все заработало&lt;/p&gt;</content><author><name>Poisonous John</name></author><category term="Crash" /><category term="Facebook" /><category term="iOS" /><category term="ObjectiveC" /><category term="SDK" /><summary type="html">Каким-то необычайно странным образом столкнулся со следующей проблемой: Запускаем приложениеЗапрашиваем права на publish_actionsДаем отказ в правахПерезапускаем приложениеПолучаем crash на objc_release (двойной релиз) Включив Enable Zombie Objects, локализовал проблему: [FBSession release] message sent to deallocated instance В проекте выключен ARC, код брал из документации FB. Покопавшись еще немного (и приняв во внимание, что, скорее всего, FBSession релизится при logout) нашел функцию, которая приводила к крашу: void IOSFacebook::logout() { [FBSession.activeSession closeAndClearTokenInformation]; [FBSession.activeSession close]; // [FBSession setActiveSession:nil]; Эта строчка вызывала краш token.clear(); refreshAccount(); } &amp;nbsp; Не знаю что конкретно вызывало краш, обозначенная строчка ничего криминального не делала, но закомментив ее, все заработало</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://poisonousjohn.github.io/wp-content/uploads/2014/05/67a6bfe5cb2.png" /></entry><entry><title type="html">XCode5: Assistant editor</title><link href="https://poisonousjohn.github.io/dev-tools/xcode5-assistant-editor.html" rel="alternate" type="text/html" title="XCode5: Assistant editor" /><published>2014-04-02T13:50:19+04:00</published><updated>2014-04-02T13:50:19+04:00</updated><id>https://poisonousjohn.github.io/dev-tools/xcode5-assistant-editor</id><content type="html" xml:base="https://poisonousjohn.github.io/dev-tools/xcode5-assistant-editor.html">&lt;p&gt;&lt;a href=&quot;http://fateev.pro/wp-content/uploads/2014/04/xcode-logo.png&quot;&gt;&lt;img class=&quot;alignleft size-medium wp-image-299&quot; title=&quot;xcode-logo&quot; src=&quot;http://fateev.pro/wp-content/uploads/2014/04/xcode-logo-300x300.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;Задолбало тратить свободное рабочее место в окне, и я занялся поисками как эффективно использовать рабочую область в XCode5. После недолгих поисков наткнулся на эту &lt;a href=&quot;http://geekanddad.wordpress.com/2012/03/11/xcode-4-tip-option-key-directs-open-action-to-assistant-editor/&quot; rel=&quot;nofollow&quot;&gt;статью &lt;/a&gt; . которая позволила понять как добиться такой простой фишки как быстрое открытие файла в Assistant editor’e. Для этого достаточно вызвать диалог &lt;strong&gt;Cmd + Shift + O&lt;/strong&gt;, а затем при выборе того что открыть нажать &lt;strong&gt;Option + Enter&lt;/strong&gt;, это сразу же откроет нужное в Assistant editor’e. В самой же статье описано как можно использовать несколько Assistant editor’ов. От себя добавлю, что навигацию между ними можно осуществлять с помощью окна вызываемого по &lt;strong&gt;Cmd+J&lt;/strong&gt;.&lt;/p&gt;</content><author><name>Poisonous John</name></author><category term="daily" /><category term="tools" /><category term="xcode" /><summary type="html">Задолбало тратить свободное рабочее место в окне, и я занялся поисками как эффективно использовать рабочую область в XCode5. После недолгих поисков наткнулся на эту статью . которая позволила понять как добиться такой простой фишки как быстрое открытие файла в Assistant editor’e. Для этого достаточно вызвать диалог Cmd + Shift + O, а затем при выборе того что открыть нажать Option + Enter, это сразу же откроет нужное в Assistant editor’e. В самой же статье описано как можно использовать несколько Assistant editor’ов. От себя добавлю, что навигацию между ними можно осуществлять с помощью окна вызываемого по Cmd+J.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://poisonousjohn.github.io/wp-content/uploads/2014/04/xcode-logo.png" /></entry><entry><title type="html">Как сократить физический размер ресурсов</title><link href="https://poisonousjohn.github.io/gamedev/kak-sokratit-fizicheskiy-razmer-resursov.html" rel="alternate" type="text/html" title="Как сократить физический размер ресурсов" /><published>2014-01-23T21:25:47+04:00</published><updated>2014-01-23T21:25:47+04:00</updated><id>https://poisonousjohn.github.io/gamedev/kak-sokratit-fizicheskiy-razmer-resursov</id><content type="html" xml:base="https://poisonousjohn.github.io/gamedev/kak-sokratit-fizicheskiy-razmer-resursov.html">&lt;p&gt;&lt;a href=&quot;http://fateev.pro/wp-content/uploads/2014/01/archive.png&quot;&gt;&lt;img class=&quot;alignleft size-full wp-image-291&quot; title=&quot;archive&quot; src=&quot;http://fateev.pro/wp-content/uploads/2014/01/archive.png&quot; alt=&quot;&quot; width=&quot;256&quot; height=&quot;256&quot; /&gt;&lt;/a&gt;Обычно больше всего места занимают текстуры. Мы использовали до этого исключительно PNG, а он достаточно много весит. Распространенный хак состоит в том, чтобы разделить &lt;strong&gt;PNG&lt;/strong&gt; на два &lt;strong&gt;JPG’a&lt;/strong&gt; или на &lt;strong&gt;JPG&lt;/strong&gt; + &lt;strong&gt;PNG&lt;/strong&gt;, в первом файле будут храниться &lt;strong&gt;RGB&lt;/strong&gt; каналы, а во втором только маска. Это позволит сильно уменьшит физический размер файлов (у нас вышло более чем в 2 раза, при качестве JPEG = 95).&lt;/p&gt;

&lt;p&gt;Для разбиения текстур из &lt;strong&gt;PNG&lt;/strong&gt; на два &lt;strong&gt;JPG&lt;/strong&gt; я написал небольшой скриптик на python’e, который кладет рядом два файла.jpg_alpha.jpg, а оригинальный.png удаляет:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python
&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fnmatch&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Image&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;argparse&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ntpath&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ImageFile&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ImageFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAXBLOCK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# default is 64k
&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;splitImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'splitting &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;originalImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;baseName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ntpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splitext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;originalImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.jpg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'JPEG'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;95&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optimize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;originalImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getbands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ia&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;alphaImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RGB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;alphaImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'_alpha.jpg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'JPEG'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;locate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abspath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fnmatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;



&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argparse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Pack animations.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'images'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metavar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'I'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Directory with images'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pngDir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;png&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pngDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;splitImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Что касается &lt;strong&gt;OpenGL&lt;/strong&gt;, то в итоге происходит загрузка той же &lt;strong&gt;RGBA&lt;/strong&gt; текстуры, только она собирается из двух файлов. Я беру массив пикселей первой текстуры, записываю их в результирующий массив, а любой из каналов второй текстуры (альфы) я записываю в 4 компонент результирующего массива.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;</content><author><name>Poisonous John</name></author><category term="gamedev" /><category term="OpenGL" /><category term="python" /><category term="tools" /><category term="useful" /><summary type="html">Обычно больше всего места занимают текстуры. Мы использовали до этого исключительно PNG, а он достаточно много весит. Распространенный хак состоит в том, чтобы разделить PNG на два JPG’a или на JPG + PNG, в первом файле будут храниться RGB каналы, а во втором только маска. Это позволит сильно уменьшит физический размер файлов (у нас вышло более чем в 2 раза, при качестве JPEG = 95). Для разбиения текстур из PNG на два JPG я написал небольшой скриптик на python’e, который кладет рядом два файла.jpg_alpha.jpg, а оригинальный.png удаляет: #!/usr/bin/python import os, fnmatch import Image import argparse import ntpath import ImageFile ImageFile.MAXBLOCK = 2048*2048# default is 64k def splitImage(filename): print 'splitting %s\n' % png originalImage = Image.open(filename) baseName = ntpath.splitext(filename)[0] originalImage.save(baseName + '.jpg', 'JPEG', quality=95, optimize = True) if len(originalImage.getbands()) == 4: ir, ig, ib, ia = originalImage.split() alphaImage = Image.merge(&quot;RGB&quot;, (ia, ia, ia)); alphaImage.save(baseName + '_alpha.jpg', 'JPEG', quality=90) os.remove(filename) def locate(pattern, root=os.curdir): for path, dirs, files in os.walk(os.path.abspath(root)): for filename in fnmatch.filter(files, pattern): yield os.path.join(path, filename) parser = argparse.ArgumentParser(description='Pack animations.') parser.add_argument('images', metavar='I', help='Directory with images') args = parser.parse_args() pngDir = args.images for png in locate(&quot;*.png&quot;, pngDir): splitImage(png)   Что касается OpenGL, то в итоге происходит загрузка той же RGBA текстуры, только она собирается из двух файлов. Я беру массив пикселей первой текстуры, записываю их в результирующий массив, а любой из каналов второй текстуры (альфы) я записываю в 4 компонент результирующего массива.  </summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://poisonousjohn.github.io/wp-content/uploads/2014/01/archive.png" /></entry></feed>